name: Build Viewer to gh-pages

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Create _site directory and download character data
        run: |
          mkdir -p _site
          curl -o _site/character.json https://api.hakush.in/ww//data/character.json

      - name: Generate index.json files
        run: |
          find . -mindepth 1 -maxdepth 1 -type d | while read dir; do
            cd "$dir"
            files=$(ls | grep -Ei '\.(png|jpe?g|webp|gif)$' | jq -R -s -c 'split("\n")[:-1]')
            echo "$files" > index.json
            cd ..
          done

      - name: Get folders
        id: get_folders
        run: |
          folders=$(ls -d [0-9]*/ 2>/dev/null | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "::set-output name=folders::$folders"

      - name: Create static viewer to _site
        run: |
          mkdir -p _site/js

          # index.html
          cat > _site/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Wuthering Waves Gallery</title>
            <link rel="stylesheet" href="style.css">
          </head>
          <body>
            <div id="header">
              <h1 id="title"></h1>
              <select id="langSelect" onchange="changeLang(this.value)">
                <option value="zh">‰∏≠Êñá</option>
                <option value="en">English</option>
              </select>
            </div>
            <ul id="folder-list"></ul>
            <script>
              // ÂõΩÈôÖÂåñÊñáÊú¨
              const i18n = {
                zh: {
                  title: "üìÅ xinghuan22 ÁöÑÈ∏£ÊΩÆ bot Èù¢ÊùøÂõæ",
                  loading: "Âä†ËΩΩ‰∏≠...",
                  error: "ËØªÂèñËßíËâ≤Êï∞ÊçÆÂ§±Ë¥•:"
                },
                en: {
                  title: "üìÅ xinghuan22's Wuthering Waves Bot Gallery",
                  loading: "Loading...",
                  error: "Failed to load character data:"
                }
              };

              // Ëé∑ÂèñÊµèËßàÂô®ËØ≠Ë®Ä
              let currentLang = navigator.language.startsWith('zh') ? 'zh' : 'en';
              document.getElementById('langSelect').value = currentLang;
              
              // Êõ¥Êñ∞È°µÈù¢ÊñáÊú¨
              function updateTexts() {
                document.getElementById('title').innerText = i18n[currentLang].title;
              }

              // ÂàáÊç¢ËØ≠Ë®Ä
              function changeLang(lang) {
                currentLang = lang;
                updateTexts();
                loadGallery();
              }

              // Âä†ËΩΩÂõæÂ∫ì
              function loadGallery() {
                fetch('character.json')
                  .then(r => r.json())
                  .then(charData => {
                    const folders = JSON.parse('${{ steps.get_folders.outputs.folders }}');
                    const baseUrl = "viewer.html?folder=";
                    const list = document.getElementById("folder-list");
                    list.innerHTML = ''; // Ê∏ÖÁ©∫Áé∞ÊúâÂÜÖÂÆπ
                    
                    folders.forEach(f => {
                      const folderId = f.replace("/", "");
                      const charInfo = charData[folderId];
                      
                      if(charInfo) {
                        const li = document.createElement("li");
                        const charName = currentLang === 'zh' ? charInfo['zh-Hans'] : charInfo['en'];
                        li.innerHTML = \`<a href="\${baseUrl}\${folderId}&lang=\${currentLang}">\${charName} (\${folderId})</a>\`;
                        list.appendChild(li);
                      }
                    });
                  })
                  .catch(err => {
                    console.error(i18n[currentLang].error, err);
                    const folders = JSON.parse('${{ steps.get_folders.outputs.folders }}');
                    const baseUrl = "viewer.html?folder=";
                    const list = document.getElementById("folder-list");
                    list.innerHTML = '';
                    
                    folders.forEach(f => {
                      const name = f.replace("/", "");
                      const li = document.createElement("li");
                      li.innerHTML = \`<a href="\${baseUrl}\${name}&lang=\${currentLang}">üìÅ \${name}</a>\`;
                      list.appendChild(li);
                    });
                  });
              }

              // ÂàùÂßãÂåñ
              updateTexts();
              loadGallery();
            </script>
          </body>
          </html>
          EOF

          # viewer.html ‰øÆÊîπ
          cat > _site/viewer.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Image Viewer</title>
            <link rel="stylesheet" href="style.css">
          </head>
          <body>
            <div id="header">
              <a href="index.html" id="backLink"></a>
              <select id="langSelect" onchange="changeLang(this.value)">
                <option value="zh">‰∏≠Êñá</option>
                <option value="en">English</option>
              </select>
            </div>
            <h1 id="title"></h1>
            <div id="gallery"></div>
            <script>
              // ÂõΩÈôÖÂåñÊñáÊú¨
              const i18n = {
                zh: {
                  back: "ËøîÂõû‰∏ªÈ°µ",
                  loading: "Âä†ËΩΩ‰∏≠...",
                  folder: "üìÅ "
                },
                en: {
                  back: "Back to Home",
                  loading: "Loading...",
                  folder: "üìÅ "
                }
              };

              // Ëé∑ÂèñURLÂèÇÊï∞
              window.urlParams = new URLSearchParams(location.search);
              window.currentFolder = window.urlParams.get("folder");
              let currentLang = window.urlParams.get("lang") || (navigator.language.startsWith('zh') ? 'zh' : 'en');
              document.getElementById('langSelect').value = currentLang;

              // Êõ¥Êñ∞È°µÈù¢ÊñáÊú¨
              function updateTexts() {
                document.getElementById('backLink').innerText = i18n[currentLang].back;
                document.getElementById('title').innerText = i18n[currentLang].loading;
              }

              // ÂàáÊç¢ËØ≠Ë®Ä
              function changeLang(lang) {
                currentLang = lang;
                updateTexts();
                loadCharacterInfo();
              }

              // Âä†ËΩΩËßíËâ≤‰ø°ÊÅØ
              function loadCharacterInfo() {
                fetch('character.json')
                  .then(r => r.json())
                  .then(charData => {
                    const charInfo = charData[window.currentFolder];
                    if(charInfo) {
                      const charName = currentLang === 'zh' ? charInfo['zh-Hans'] : charInfo['en'];
                      document.getElementById("title").innerText = i18n[currentLang].folder + charName;
                    } else {
                      document.getElementById("title").innerText = i18n[currentLang].folder + window.currentFolder;
                    }
                  })
                  .catch(() => {
                    document.getElementById("title").innerText = i18n[currentLang].folder + window.currentFolder;
                  });
              }

              // ÂàùÂßãÂåñ
              updateTexts();
              loadCharacterInfo();
            </script>
            <script src="js/render.js"></script>
          </body>
          </html>
          EOF

          # render.js ‰øÆÊîπ
          cat > _site/js/render.js <<EOF
          // ‰ΩøÁî®ÂÖ®Â±ÄÂèòÈáè
          const gallery = document.getElementById("gallery");
          const base = \`https://raw.githubusercontent.com/\${location.hostname.split('.')[0]}/\${location.pathname.split('/')[1]}/gh-pages/\${window.currentFolder}/\`;

          fetch(\`\${base}index.json\`)
            .then(r => r.json())
            .then(images => {
              images.forEach(img => {
                const el = document.createElement("img");
                el.src = base + img;
                el.alt = img;
                el.style = "max-width:200px;margin:10px;border:1px solid #ccc;";
                gallery.appendChild(el);
              });
            });
          EOF

          # style.css
          cat > _site/style.css <<EOF
          body {
            font-family: sans-serif;
            padding: 20px;
            background: #f2f2f2;
          }
          img {
            max-width: 200px;
            margin: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
          }

          #header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
          }

          #langSelect {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
          }
          EOF

      - name: Copy image folders to _site
        run: |
          for dir in [0-9][0-9]*/; do
            cp -r "$dir" _site/
          done

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          publish_branch: gh-pages
